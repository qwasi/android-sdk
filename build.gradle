apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'
import groovy.json.JsonSlurper
def packageSluper = new JsonSlurper()
def packageJson = packageSluper.parse file('package.json')

//android support
buildscript {
	repositories {
		jcenter()
		mavenCentral()
		maven{
			url "https://plugins.gradle.org/m2/"
		}
	}

	dependencies {
		classpath 'com.moowork.gradle:gradle-grunt-plugin:0.11'
		classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3'
		classpath 'com.android.tools.build:gradle:1.3.0'
	}
}

allprojects{
    repositories{
		jcenter()
		maven{url "file:///Users/ccoulton/qwasijson"}
    }
}

//apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.moowork.grunt'
apply plugin: 'com.android.library'
apply plugin: 'io.codearte.nexus-staging'

android {
	compileSdkVersion 23
	buildToolsVersion '23.0.0'
	defaultConfig {
		minSdkVersion 15
		targetSdkVersion 23
	}
}

android{
	useLibrary 'org.apache.http.legacy'
}

repositories{
	mavenCentral()
	jcenter()
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
	//messaging
	compile 'com.google.android.gms:play-services-gcm:8.1.0'
	//location and Geofence
	compile 'com.google.android.gms:play-services-location:8.1.0'
	//beacons radiusnetworks
	compile 'org.altbeacon:android-beacon-library:2.3.5'
	//Json client and sending
	compile 'com.qwasi:QwasiJson:1.0.4'
}

sourceSets{
	main{
		java{
			srcDir 'src/java'
		}
		resources{
			srcDir 'src/resources'
		}
	}
}

group = 'com.qwasi'
archivesBaseName = packageJson.name
version = packageJson.version

task sourcesJar(type: Jar) {
	from android.sourceSets.main.java.srcDirs
	classifier = 'sources'
}

task androidJavadoc(type: Javadoc) {
	include 'org.altbeacon:android-beacon-library:2.3.5'
	include 'com.qwasi:QwasiJson:1.0.4'
	include 'com.google.android.gms:play-services-gcm:8.1.0'
	include 'com.google.android.gms:play-services-location:8.1.0'
	source = android.sourceSets.main.java.srcDirs
	classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadoc(type: Javadoc){
	source = sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: androidJavadoc) {
	classifier = 'javadoc'
	from androidJavadoc.destinationDir
	from javadoc.destinationDir
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

signing{
	sign configurations.archives
}

uploadArchives{
	repositories{
		mavenDeployer {
			//repository(url: 'file:///Users/ccoulton/QwasiSDK')
			//this will be moving to the bamboo server.
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }


			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2")
					{ authentication(userName: ossrhUsername, password: ossrhPassword) }

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots")
					{ authentication(userName: ossrhUsername, password: ossrhPassword) }//*/

			pom.project {
				name 'QwasiSDK'
				packaging 'jar'
				description 'SDK for accessing Qwasi\'s backend api for mixed method broadcasts'
				url "https://github.com/Qwasi"
				scm {
					connection 'scm:git:git@github.com:qwasi/android-sdk.git'
					developerConnection 'scm:git:git@github.com:qwasi/android-sdk.git'
					url 'https://github.com/qwasi/android-sdk'
				}
				licenses {
					license {
						name 'MIT'
						distribution 'repo'
					}
				}

				developers {
					developer {
						id 'ccoulton'
						name 'Charles Coulton'
						email 'charles.coulton@qwasi.com'
					}
					developer {
						name 'Rob Rodriguez'
						email 'rob.rodriguez@qwasi.com'
					}
					developer{
						id 'qwasibuild'
						name 'Qwasi Bamboo'
						email 'support@qwasi.com'
					}
				}
			}
		}
	}
}